///Main Program 
namespace DowncastingDay7
{
    class Program
    {

        static void Main(string[] args)
        {
            Shape[] shapes = new Shape[3];
            shapes[0] = new Shape(100, 100);
            shapes[1] = new Square(200, 200);
            shapes[2] = new Circle(300, 300);

            foreach (Shape shape in shapes)
            {
                shape.Draw();

                if (shape is Circle)
                    ((Circle)shape).FillCircle();

                if (shape is Square)
                    ((Square)shape).FillSquare();
            }
        }
    }
}
            
        
// Class  major class-shape
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DowncastingDay7
{
    public class Shape   // abstract class Shape
    {
        protected int m_xpos;
        protected int m_ypos;

        public Shape()
        {
        }

        public Shape(int x, int y)
        {
            m_xpos = x;
            m_ypos = y;
        }

        public virtual void Draw()  // public abstract void Draw() { } 
        {
            Console.WriteLine("Drawing a SHAPE at {0},{1}", m_xpos, m_ypos);
        }
    }
}

//class circle

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DowncastingDay7
{
    public class Circle : Shape
    {
        public Circle(int x, int y) : base(x, y)
        {
        }
        public override void Draw()
        {
            Console.WriteLine("Drawing a CIRCLE at {0},{1}", m_xpos, m_ypos);
        }
        public void FillCircle()
        {
            Console.WriteLine("Filling CIRCLE at {0},{1}", m_xpos, m_ypos);
        }
    }
}

//class square
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DowncastingDay7
{

    public class Square : Shape
    {
        public Square(int x, int y) : base(x, y)
        {
        }
        public override void Draw()
        {
            Console.WriteLine("Drawing a SQUARE at {0},{1}", m_xpos, m_ypos);
        }
        public void FillSquare()
        {
            Console.WriteLine("Filling SQUARE at {0},{1}", m_xpos, m_ypos);
        }
    }
}


    


    
    


