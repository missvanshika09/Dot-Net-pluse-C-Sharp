using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankAccount
{
    delegate void WithdrawDelegate(double amount, double bal, string nm);
    internal abstract class Account
    {
        static int id;//Id is generated by application write  read only property for ID.
        int Accid; //, Id is auto increment
        String name;
        double balance;
        public event WithdrawDelegate Event;
        protected const double minbal = 1000;//In saving account maintain minimum balance 1000 for this declare Const double minbal = 1000
        public Account(String name, double balance) //Consrtuctor 
        {
            Accid = ++id;
            this.Name = name;
            this.Balance = balance;
        }
        /*getter setter for name 
Balance can be set only by child class.
*/
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public double Balance
        {
            get { return balance; }
            set { balance = value; }
        }
        //It has deposit method which will increase the balance.
        public void deposit(double amt)
        {
            Balance = Balance + amt; //adding in the balance the new deposit amt
        }
        //withdraw method.
        public abstract void Withdraw(double amt); //goes to saving +current child
        public void OnWithdraw(double a, String n, double b)// calling the actual event
        {
            if (Event != null)
                Event(a, b, n);//sequence 
        }
    }

    }
//saving Account child of Account
 internal class Saving: Account //inheritance 
 { public Saving(String name, double balance): base(name, balance) // same as declared in parent ie account
     {
         Console.WriteLine(" In saving constructor");
     }
     public override void Withdraw(double amt) //overide parent abstract method 
     {
         Balance = Balance -amt; // getter se liya h isly B captial h 
     }

 }
//current Account child of Account
internal class Current  : Account  //inheritance 
{
    public Current (String name, double balance): base(name, balance)
    {
        Console.WriteLine("In Current Constructor");
    }
    public override void Withdraw(double amt) //override the account  abstract method 
    {
   Balance =Balance- amt;
    }

}
//Message class
 internal class Message
 {
     public void  email(double amount, double bal, string nm)
     {
         Console.WriteLine("E-mail : Amount withdrawn : {0} new bal={1} name={2}", amount, bal, nm);
         Console.WriteLine("Recieved Email");
     }
     public void sms(double amount, double bal, string nm)
     {
         Console.WriteLine("SmS: Amount withdrawn : {0} new bal={1}", amount, bal, nm);
         Console.WriteLine("Recieved SMS");
     }
 }
//Main entry point

    internal class Program
    {
        static void Main(string[] args)
        {
            Account s = new Saving("vansh", 6000); //upcasting
            Account s2 = new Saving("Aansh", 16000);//upcasting
            Message message = new Message();

            s.Withdraw(1000);
            
            s.Event += message.email;
            s.Event += message.sms ;

            s.OnWithdraw(1000, s.Name,s.Balance);
           

            s2.Withdraw(5000);
            s2.Event += message.email;
            s2.Event += message.sms;
            s2.OnWithdraw(5000, s2.Name, s2.Balance);

        }
    }

